class Category:

    def __init__(self, name):
        self.name = name
        self.ledger = list()
        self.deposit_total = 0
        self.withdraw_total = 0
        self.current_balance = 0

    def __str__(self):
        title = f"{self.name:*^30}\n"
        items = ""
        total = 0
        for x in self.ledger:
            items += f"{x['description'][0:23]:23}" + f"{x['amount']:>7.2f}" + '\n'
            total += x['amount']
        total = str(total)
        final = title + items + "Total: " + total
        return final

    def deposit(self, amount, description=""):
        if amount > 0:
            self.deposit_total += amount
            self.ledger.append({"amount": amount, "description": description})
        else:
            return ""

    def withdraw(self, amount, description=""):
        if self.get_balance() >= amount > 0:
            amount *= -1
            self.withdraw_total += (amount * -1)
            self.ledger.append({"amount": amount, "description": description})
            return True
        else:
            return False

    def get_balance(self):
        self.current_balance = self.deposit_total - self.withdraw_total
        return self.current_balance

    def transfer(self, amount, budget_category):
        if self.check_funds(amount):
            self.withdraw(amount, "Transfer to " + budget_category.name)
            budget_category.deposit(amount, "Transfer from " + self.name)
            return True
        else:
            return False

    def check_funds(self, amount):
        if amount > self.get_balance():
            return False
        else:
            return True


def truncate(n):
    multiplier = 10
    return int(n * multiplier) / multiplier


def get_totals(categories):
    total = 0
    details = list()
    for category in categories:
        total += category.withdraw_total
        details.append(category.withdraw_total)
    rounded = list(map(lambda x: truncate(x/total), details))
    return rounded


def create_spend_chart(categories):
    all_string = "Percentage spent by category\n"
    i = 100
    totals = get_totals(categories)
    while i >= 0:
        cat_spaces = " "
        for total in totals:
            if total * 100 >= i:
                cat_spaces += "o  "
            else:
                cat_spaces += "   "
        all_string += str(i).rjust(3) + "|" + cat_spaces + "\n"
        i -= 10

    dashes = "-" + "---"*len(categories)
    names = list()
    x_axis = ""
    for category in categories:
        names.append(category.name)

    maxi = max(names, key=len)

    for x in range(len(maxi)):
        name_str = "     "
        for name in names:
            if x >= len(name):
                name_str += "   "
            else:
                name_str += name[x] + "  "

        if x != len(maxi) - 1:
            name_str += "\n"

        x_axis += name_str
    all_string += dashes.rjust(len(dashes) + 4) + "\n" + x_axis
    return all_string
